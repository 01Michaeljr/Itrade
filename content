@@ -1,16 +1,16 @@
version: 2
jobs:
  build:    
  build:
    docker:
      - image: cirrusci/flutter:stable
      - image: cirrusci/flutter:2.2.3

    steps:
      - checkout
      - run:
          name: Update submodules
          command: |
              git submodule init
              git submodule update --remote
            git submodule init
            git submodule update --remote
      - run:
          name: Run Flutter doctor
@@ -22,9 +22,9 @@ jobs:

      - restore_cache:
          keys:
              - android-sdk-licenses
              - gradle
              - pub-cache
            - android-sdk-licenses
            - gradle
            - pub-cache

      - run:
          name: pub get
@@ -46,37 +46,37 @@ jobs:
      - run:
          name: Code analysis
          command: |
              flutter pub global activate tuneup
              flutter pub global run tuneup check
            flutter pub global activate tuneup
            flutter pub global run tuneup check
    #   - run:
    #       name: Check that the package is ready for publishing
    #       command: flutter packages pub publish --dry-run
      #   - run:
      #       name: Check that the package is ready for publishing
      #       command: flutter packages pub publish --dry-run

      - run:
          name: Check that the package is ready for publishing
          command: |
              cd example && flutter build apk
            cd example && flutter build apk
      - save_cache:
          key: android-sdk-licenses
          paths:
              - /opt/android-sdk-linux/licenses
            - /opt/android-sdk-linux/licenses

      - save_cache:
          key: pub-cache
          paths:
              - /home/cirrus/.pub-cache
            - /home/cirrus/.pub-cache

      - save_cache:
          key: gradle
          paths:
              - ~/.gradle
            - ~/.gradle

      - run:
          name: Copy APK
          command: |
              sudo mkdir -p /artifacts && sudo chown "$(whoami)" /artifacts && cp example/build/app/outputs/apk/release/app-release.apk /artifacts/deriv-api-example.apk
            sudo mkdir -p /artifacts && sudo chown "$(whoami)" /artifacts && cp example/build/app/outputs/apk/release/app-release.apk /artifacts/deriv-api-example.apk
      - store_artifacts:
          path: /artifacts
 2  
example/lib/blocs/price_proposal/price_proposal_bloc.dart
@@ -1,3 +1,5 @@
// ignore_for_file: deprecated_member_use

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:rxdart/rxdart.dart';

  5  
example/lib/blocs/ticks/ticks_bloc.dart
@@ -1,3 +1,5 @@
// ignore_for_file: deprecated_member_use

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:rxdart/rxdart.dart';

@@ -16,7 +18,8 @@ part 'ticks_state.dart';
class TicksBloc extends Bloc<TicksEvent, TicksState> {
  /// Initializes
  TicksBloc(ActiveSymbolsBloc activeSymbolsBloc) : super(TicksLoading()) {
    activeSymbolsBloc.stream.listen((ActiveSymbolsState activeSymbolsState) async {
    activeSymbolsBloc.stream
        .listen((ActiveSymbolsState activeSymbolsState) async {
      if (activeSymbolsState is ActiveSymbolsLoaded) {
        add(SubscribeTicks(activeSymbolsState.selectedSymbol));
      }
  27  
example/lib/sample_app.dart
@@ -2,7 +2,7 @@ import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:flutter_deriv_api/services/connection/api_manager/connection_information.dart';
import 'package:flutter_deriv_api/state/connection/connection_bloc.dart'
import 'package:flutter_deriv_api/state/connection/connection_cubit.dart'
    as api_connection;
import 'package:flutter_deriv_api_example/pages/main_page.dart';

@@ -13,13 +13,13 @@ class SampleApp extends StatefulWidget {
}

class _SampleAppState extends State<SampleApp> {
  late api_connection.ConnectionBloc _connectionBloc;
  late api_connection.ConnectionCubit _connectionCubit;

  @override
  void initState() {
    super.initState();

    _connectionBloc = api_connection.ConnectionBloc(
    _connectionCubit = api_connection.ConnectionCubit(
      ConnectionInformation(
        appId: '1089',
        brand: 'binary',
@@ -30,42 +30,41 @@ class _SampleAppState extends State<SampleApp> {

  @override
  void dispose() {
    _connectionBloc.close();
    _connectionCubit.close();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) => MultiBlocProvider(
        providers: <BlocProvider<dynamic>>[
          BlocProvider<api_connection.ConnectionBloc>.value(
            value: _connectionBloc,
          BlocProvider<api_connection.ConnectionCubit>.value(
            value: _connectionCubit,
          ),
        ],
        child: Scaffold(
          appBar: AppBar(
            title: const Text('API Sample App'),
          ),
          body: BlocBuilder<api_connection.ConnectionBloc,
          body: BlocBuilder<api_connection.ConnectionCubit,
              api_connection.ConnectionState>(
            builder: (
              BuildContext context,
              api_connection.ConnectionState state,
            ) {
              if (state is api_connection.Connected) {
              if (state is api_connection.ConnectionConnectedState) {
                return MainPage();
              } else if (state is api_connection.InitialConnectionState ||
                  state is api_connection.Connecting) {
              } else if (state is api_connection.ConnectionInitialState ||
                  state is api_connection.ConnectionConnectingState) {
                return _buildCenterText('Connecting...');
              } else if (state is api_connection.ConnectionError) {
              } else if (state is api_connection.ConnectionErrorState) {
                return _buildCenterText('Connection Error\n${state.error}');
              } else if (state is api_connection.Disconnected) {
              } else if (state is api_connection.ConnectionDisconnectedState) {
                return _buildCenterText(
                  'Connection is down, trying to reconnect...',
                );
              } else if (state is api_connection.Reconnecting) {
                return _buildCenterText('Reconnecting...');
              }

              return Container();
            },
          ),
  138  
lib/services/connection/connection_service.dart
@@ -2,34 +2,24 @@ import 'dart:async';

import 'package:connectivity/connectivity.dart';

import 'package:flutter_deriv_api/api/common/ping/ping.dart';
import 'package:flutter_deriv_api/services/connection/connection_status.dart';
import 'package:flutter_deriv_api/state/connection/connection_bloc.dart';
import 'package:flutter_deriv_api/state/connection/connection_cubit.dart';

/// A class to check the connectivity of the device to the Internet
/// A class to check the connectivity of the device to the Internet.
class ConnectionService {
  /// Initializes
  factory ConnectionService() => _instance;

  ConnectionService._internal();

  static final ConnectionService _instance = ConnectionService._internal();
  final int _connectivityCheckInterval = 5;
  final int _pingTimeout = 5;
  // In some devices like Samsung J6 or Huawei Y7, the call manager doesn't response to the ping call less than 8 sec.
  final int _initialPingTimeOut = 8;
  final int _pingMaxExceptionCount = 3;
  int _pingExceptionCount = 0;

  ConnectionStatus _connectionStatus = ConnectionStatus.connecting;

  /// Stream of connection states
  /// Stream of connection states.
  StreamController<bool> connectionChangeController =
      StreamController<bool>.broadcast();

  final Connectivity _connectivity = Connectivity();

  /// Stream of bool whether we are connected or not
  /// Stream of bool whether we are connected or not.
  Stream<bool> get state => connectionChangeController.stream;

  /// Returns true if we are connected to the Internet.
@@ -41,124 +31,34 @@ class ConnectionService {
        connectivityResult == ConnectivityResult.mobile;
  }

  Timer? _connectivityTimer;

  ConnectionBloc? _connectionBloc;

  Future<ConnectionStatus> _checkConnection(ConnectivityResult result) async {
    final ConnectionStatus previousConnection = _connectionStatus;

    if (_connectionBloc!.state is Reconnecting) {
      return ConnectionStatus.connecting;
    }

    switch (result) {
      case ConnectivityResult.wifi:
      case ConnectivityResult.mobile:
        if (_connectionBloc!.state is! Connected) {
          await _connectionBloc!.connectWebSocket();
        }

        final bool pingResult = await _checkPingConnection();

        _connectionStatus = pingResult
            ? ConnectionStatus.connected
            : ConnectionStatus.disconnected;

        break;
      case ConnectivityResult.none:
        _connectionStatus = ConnectionStatus.disconnected;
        break;

      default:
        _connectionStatus = ConnectionStatus.disconnected;
    }

    if (previousConnection != _connectionStatus) {
      connectionChangeController
          .add(_connectionStatus == ConnectionStatus.connected);
    }

    return _connectionStatus;
  }

  /// Closes the connection service
  void dispose() {
    connectionChangeController.close();

    _stopConnectivityTimer();
  }

  /// Initializes
  /// Initializes connection service.
  Future<void> initialize({
    ConnectionBloc? connectionBloc,
    ConnectionCubit? connectionCubit,
    bool isMock = false,
  }) async {
    if (isMock) {
      return;
    }

    _connectionBloc = connectionBloc;
    await checkConnectivity();
    _connectivity.onConnectivityChanged.listen(_checkConnection);
    _startConnectivityTimer();
  }

  /// Checks devices connectivity
  Future<bool> checkConnectivity() async {
    final ConnectivityResult connectivityResult =
        await _connectivity.checkConnectivity();
    final ConnectionStatus connectionResult =
        await _checkConnection(connectivityResult);

    return connectionResult == ConnectionStatus.connected;
  }
  Future<void> _checkConnection(ConnectivityResult result) async {
    switch (result) {
      case ConnectivityResult.wifi:
      case ConnectivityResult.mobile:
        connectionChangeController.add(true);

  // Checks for change to connectivity to internet every [_connectivityCheckInterval] seconds
  void _startConnectivityTimer() {
    if (_connectivityTimer == null || !_connectivityTimer!.isActive) {
      _connectivityTimer = Timer.periodic(
        Duration(seconds: _connectivityCheckInterval),
        (Timer timer) async => checkConnectivity(),
      );
    }
  }
        break;
      case ConnectivityResult.none:
        connectionChangeController.add(false);
        break;

  void _stopConnectivityTimer() => _connectivityTimer?.cancel();

  Future<bool> _ping() async {
    try {
      final Ping response = await Ping.ping().timeout(
        Duration(
          seconds: _connectionBloc!.state is InitialConnectionState
              ? _initialPingTimeOut
              : _pingTimeout,
        ),
      );

      if (!response.succeeded!) {
        return Future<bool>.value(false);
      }
    } on Exception catch (_) {
      return Future<bool>.value(false);
      default:
        connectionChangeController.add(false);
    }

    return Future<bool>.value(true);
  }

  Future<bool> _checkPingConnection() async {
    final bool _pingSuccess = await _ping();

    if (!_pingSuccess) {
      if (_pingExceptionCount++ > _pingMaxExceptionCount) {
        return false;
      }

      return _connectionStatus == ConnectionStatus.connected;
    }

    _pingExceptionCount = 0;

    return true;
  }
  /// Closes the connection service.
  void dispose() => connectionChangeController.close();
}
 137  
lib/state/connection/connection_bloc.dart
This file was deleted.

 160  
lib/state/connection/connection_cubit.dart
@@ -0,0 +1,160 @@
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:flutter_deriv_api/api/api_initializer.dart';
import 'package:flutter_deriv_api/api/common/ping/ping.dart';
import 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';
import 'package:flutter_deriv_api/services/connection/api_manager/connection_information.dart';
import 'package:flutter_deriv_api/services/connection/connection_service.dart';
import 'package:flutter_deriv_api/services/dependency_injector/injector.dart';

part 'connection_state.dart';

/// Bringing [ConnectionCubit] to flutter-deriv-api to simplify the usage of api.
class ConnectionCubit extends Cubit<ConnectionState> {
  /// Initializes [ConnectionCubit].
  ConnectionCubit(
    ConnectionInformation connectionInformation, {
    this.isMock = false,
  }) : super(ConnectionInitialState()) {
    APIInitializer().initialize(isMock: isMock, uniqueKey: _uniqueKey);

    _api ??= Injector.getInjector().get<BaseAPI>();

    _connectionInformation = connectionInformation;

    ConnectionService().state.listen(
      (bool state) {
        if (state) {
          connect();
        } else {
          if (state is! ConnectionDisconnectedState) {
            emit(ConnectionDisconnectedState());
          }
        }
      },
    );

    _startConnectivityTimer();

    connect();
  }

  /// Creates mock connection, sets this to [true] for testing purposes
  final bool isMock;

  static const Duration _callTimeOut = Duration(seconds: 10);

  // In some devices like Samsung J6 or Huawei Y7, the call manager doesn't response to the ping call less than 8 sec.
  final int _pingTimeout = 5;
  final int _pingMaxExceptionCount = 3;
  final int _connectivityCheckInterval = 5;

  final UniqueKey _uniqueKey = UniqueKey();

  int _pingExceptionCount = 0;

  BaseAPI? _api;
  Timer? _connectivityTimer;

  ConnectionInformation? _connectionInformation;

  /// Connection information of WebSocket (endpoint, brand, appId).
  ConnectionInformation? get connectionInformation => _connectionInformation;

  /// Connects to the web socket.
  ///
  /// This function MUST NOT be called outside of this package.
  Future<void> connect({ConnectionInformation? connectionInformation}) async {
    if (state is! ConnectionConnectingState) {
      emit(ConnectionConnectingState());
    }

    if (connectionInformation != null) {
      _connectionInformation = connectionInformation;
    }

    await _api!.disconnect().timeout(_callTimeOut);

    await _api!.connect(
      _connectionInformation,
      onDone: (UniqueKey uniqueKey) async {
        if (_uniqueKey == uniqueKey) {
          await _api!.disconnect();

          emit(ConnectionDisconnectedState());
        }
      },
      onOpen: (UniqueKey uniqueKey) {
        if (_uniqueKey == uniqueKey && state is! ConnectionConnectedState) {
          emit(ConnectionConnectedState());
        }
      },
      onError: (UniqueKey uniqueKey) {
        if (_uniqueKey == uniqueKey) {
          emit(ConnectionDisconnectedState());
        }
      },
    );
  }

  // Checks for change to connectivity to internet every [_connectivityCheckInterval] seconds.
  void _startConnectivityTimer() {
    if (_connectivityTimer == null || !_connectivityTimer!.isActive) {
      _connectivityTimer = Timer.periodic(
        Duration(seconds: _connectivityCheckInterval),
        (Timer timer) async {
          final bool isOnline = await _checkPingConnection();

          if (!isOnline) {
            emit(ConnectionDisconnectedState());
          }
        },
      );
    }
  }

  void _stopConnectivityTimer() => _connectivityTimer?.cancel();

  Future<bool> _ping() async {
    try {
      final Ping response =
          await Ping.ping().timeout(Duration(seconds: _pingTimeout));

      if (!response.succeeded!) {
        return false;
      }
    } on Exception catch (_) {
      return false;
    }

    return true;
  }

  Future<bool> _checkPingConnection() async {
    final bool _pingSuccess = await _ping();

    if (!_pingSuccess) {
      if (_pingExceptionCount++ > _pingMaxExceptionCount) {
        _pingExceptionCount = 0;

        return false;
      }

      return true;
    }

    _pingExceptionCount = 0;

    return true;
  }

  @override
  Future<void> close() {
    _stopConnectivityTimer();

    return super.close();
  }
}
 49  
lib/state/connection/connection_event.dart
This file was deleted.

 40  
lib/state/connection/connection_state.dart
@@ -1,47 +1,41 @@
part of 'connection_bloc.dart';
part of 'connection_cubit.dart';

/// Connection States
/// Connection States.
abstract class ConnectionState {}

/// Initial state
class InitialConnectionState extends ConnectionState {
/// Connection initial state.
class ConnectionInitialState extends ConnectionState {
  @override
  String toString() => 'ConnectionState: InitialConnectionState';
}

/// shows that we are in the process of connecting
class Connecting extends ConnectionState {
  /// Initializes
  Connecting();
/// Shows that we are in the process of connecting.
class ConnectionConnectingState extends ConnectionState {
  /// Initializes connection connecting state
  ConnectionConnectingState();

  @override
  String toString() => 'ConnectionState: Connecting...';
}

/// Connected state
class Connected extends ConnectionState {
/// Connection connected state.
class ConnectionConnectedState extends ConnectionState {
  @override
  String toString() => 'ConnectionState: Connected';
}

/// Disconnected state
class Disconnected extends ConnectionState {
/// Connection disconnected state.
class ConnectionDisconnectedState extends ConnectionState {
  @override
  String toString() => 'ConnectionState: Disconnected';
}

/// Reconnecting state
class Reconnecting extends ConnectionState {
  @override
  String toString() => 'ConnectionState: Reconnecting...';
}

/// Connection error state
class ConnectionError extends ConnectionState {
  /// Initializes with the this [error] message
  ConnectionError(this.error);
/// Connection error state.
class ConnectionErrorState extends ConnectionState {
  /// Initializes with the this [error] message.
  ConnectionErrorState(this.error);

  /// An exception or message from the server
  /// An exception or message from the server.
  final String error;

  @override
  12  
lib/state/server_time/server_time_bloc.dart
@@ -4,7 +4,7 @@ import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:flutter_deriv_api/api/common/server_time/exceptions/server_time_exception.dart';
import 'package:flutter_deriv_api/api/common/server_time/server_time.dart';
import 'package:flutter_deriv_api/state/connection/connection_bloc.dart';
import 'package:flutter_deriv_api/state/connection/connection_cubit.dart';
import 'package:flutter_deriv_api/helpers/helpers.dart';

part 'server_time_event.dart';
@@ -13,10 +13,10 @@ part 'server_time_state.dart';
/// A Bloc for fetching server time
class ServerTimeBloc extends Bloc<ServerTimeEvent, ServerTimeState> {
  /// Initializes
  ServerTimeBloc(this._connectionBloc) : super(InitialServerTime()) {
  ServerTimeBloc(this._connectionCubit) : super(InitialServerTime()) {
    _connectionSubscription =
        _connectionBloc.stream.listen((ConnectionState state) {
      if (state is Connected) {
        _connectionCubit.stream.listen((ConnectionState state) {
      if (state is ConnectionConnectedState) {
        add(FetchServerTime());

        _serverTimeInterval = Timer.periodic(const Duration(seconds: 90),
@@ -27,7 +27,7 @@ class ServerTimeBloc extends Bloc<ServerTimeEvent, ServerTimeState> {
    });
  }

  final ConnectionBloc _connectionBloc;
  final ConnectionCubit _connectionCubit;

  StreamSubscription<ConnectionState>? _connectionSubscription;

@@ -36,7 +36,7 @@ class ServerTimeBloc extends Bloc<ServerTimeEvent, ServerTimeState> {
  @override
  Stream<ServerTimeState> mapEventToState(ServerTimeEvent event) async* {
    if (event is FetchServerTime) {
      if (_connectionBloc.state is Connected) {
      if (_connectionCubit.state is ConnectionConnectedState) {
        try {
          final ServerTime serverTime =
              await ServerTime.fetchTime().timeout(const Duration(seconds: 30));
 32  
test/state/connection/connection_bloc_test.dart
@@ -1,41 +1,19 @@
import 'package:bloc_test/bloc_test.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:flutter_deriv_api/services/connection/api_manager/connection_information.dart';
import 'package:flutter_deriv_api/state/connection/connection_bloc.dart';
import 'package:flutter_deriv_api/state/connection/connection_cubit.dart';

void main() {
  group('Connection Bloc =>', () {
    late final ConnectionBloc connectionBloc;
  group('Connection Cubit =>', () {
    late final ConnectionCubit connectionCubit;

    setUpAll(
      () => connectionBloc = ConnectionBloc(
      () => connectionCubit = ConnectionCubit(
        ConnectionInformation(appId: '', brand: '', endpoint: ''),
        isMock: true,
      ),
    );

    tearDownAll(() => connectionBloc.close());

    blocTest<ConnectionBloc, ConnectionState>(
      'Emits [Connect] Test.',
      build: () => connectionBloc,
      act: (ConnectionBloc bloc) async => bloc.add(Connect()),
      expect: () => <dynamic>[isA<Connected>()],
    );

    blocTest<ConnectionBloc, ConnectionState>(
      'Emits [Disconnect] Test.',
      build: () => connectionBloc,
      act: (ConnectionBloc bloc) async => bloc.add(Disconnect()),
      expect: () => <dynamic>[],
    );

    blocTest<ConnectionBloc, ConnectionState>(
      'Emits [Reconnect] Test.',
      build: () => connectionBloc,
      act: (ConnectionBloc bloc) async => bloc.add(Reconnect()),
      expect: () => <dynamic>[],
    );
    tearDownAll(() => connectionCubit.close());
  });
}
